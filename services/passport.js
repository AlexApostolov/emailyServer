// Config file for Passport
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

// Create "User" model class--object that gives a handle to the collection "User"--to create a new model instance to the user below inside the callback function
// "mongoose.model()" with 1 arg means fetch, with 2 args means load into--see User.js
const User = mongoose.model('User');

// Serialize user using Passport with the user to generate the identifying piece of info and set cookie information.
// 1st arg is the user model just returned from the DB, 2nd arg done().
passport.serializeUser((user, done) => {
  // Error first not needed in this straightforward process so "null" used as 1st arg.
  // 2nd arg is the unique ID automatically generated by MongoDB and assigned to this record, i.e. shortcut to "_id:...",
  // this way we can easily use multiple authentication providers with the same identifier instead of using Google's "profile.id".
  // OAuth's only purpose is to allow someone to sign in, after that, we use our own internal ID's.
  done(null, user.id);
});

// Turn the ID stuffed in the user's cookie back into a user model instance.
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

// Create new instance of the Google Passport strategy & pass it to the generic passport
passport.use(
  new GoogleStrategy(
    {
      // Give the strategy an options object as the 1st arg with a (public token) client id, (private...) client secret, & callback URL
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      // Allow Heroku to use a proxy with the callback URL so https works, otherwise Google will incorrectly assume http
      proxy: true
    },
    (accessToken, refreshToken, profile, done) => {
      // Use the "User" model class to search over all the records inside a collection. A query can't be simply saved in a variable, but it returns a promise.
      // Only if there's no matching Google ID already, create it.
      User.findOne({ googleId: profile.id }).then(existingUser => {
        if (existingUser) {
          // We already have a record with the given profile ID
          // Tell Passport we are done. Pass a 1st argument for error handling--here null will suffice, then 2nd arg of user record
          done(null, existingUser);
        } else {
          // Promise returned "null". We don't have a user record with this ID, make a new record!
          // Create a new model instance, i.e. record, of "User", and then persist it--doesn't otherwise save automatically in the DB
          // NOTE: "new" + "save()" is equivalent to "User.create". Also, this is async so we need to use a Promise after for done()
          // It is best practice to use the freshest data, so instead of the newly saved, we use what was then returned as "user"
          new User({ googleId: profile.id })
            .save()
            .then(user => done(null, user));
        }
      });
    }
  )
);
